import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:shared_preferences/shared_preferences.dart';

class ConfirmOrdersScreen extends StatefulWidget {
  @override
  _ConfirmOrdersScreenState createState() => _ConfirmOrdersScreenState();
}

class _ConfirmOrdersScreenState extends State<ConfirmOrdersScreen> {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  String _userEmail = "";
  bool _isProcessing = false; // To track the processing state

  @override
  void initState() {
    super.initState();
    _loadUserEmail();
  }

  Future<void> _loadUserEmail() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    setState(() {
      _userEmail = prefs.getString('email') ?? '';
    });
  }

  Future<List<Map<String, dynamic>>> getMyBookRequests() async {
    if (_userEmail.isEmpty) {
      return [];
    }

    QuerySnapshot<Map<String, dynamic>> querySnapshot = await _firestore
        .collection('bookRequests')
        .where('publisherEmail', isEqualTo: _userEmail)
        .get();

    List<Map<String, dynamic>> bookRequests = [];

    for (var doc in querySnapshot.docs) {
      Map<String, dynamic> data = doc.data();
      data['docId'] = doc.id;
      bookRequests.add(data);
    }

    // Sort the list to show 'requested' status first
    bookRequests.sort((a, b) {
      if (a['status'] == 'requested' && b['status'] != 'requested') {
        return -1; // Move 'requested' to the top
      } else if (a['status'] != 'requested' && b['status'] == 'requested') {
        return 1; // Move non-'requested' below
      } else {
        return 0; // Keep order for other statuses
      }
    });

    return bookRequests;
  }

  Future<Map<String, dynamic>> getUserDetails(String userEmail) async {
    QuerySnapshot<Map<String, dynamic>> querySnapshot = await _firestore
        .collection('users')
        .where('email', isEqualTo: userEmail)
        .get();

    if (querySnapshot.docs.isNotEmpty) {
      return querySnapshot.docs.first.data();
    }

    return {};
  }

  Future<void> confirmBookRequest(String docId, String phone, String place, String time) async {
    setState(() {
      _isProcessing = true; // Start processing
    });

    try {
      await _firestore.collection('bookRequests').doc(docId).update({
        'status': 'confirmed',
        'pickupPhone': phone,
        'pickupPlace': place,
        'pickupTime': time,
      });

      // Show a Snackbar message
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Book request confirmed!'),
          duration: Duration(seconds: 2),
        ),
      );

      // Refresh the list
      setState(() {
        _isProcessing = false;
      });
    } catch (error) {
      // Handle error
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Failed to confirm request'),
          duration: Duration(seconds: 2),
        ),
      );
      setState(() {
        _isProcessing = false;
      });
    }
  }

  Future<void> cancelBookRequest(String docId) async {
    setState(() {
      _isProcessing = true; // Start processing
    });

    try {
      await _firestore.collection('bookRequests').doc(docId).delete();

      // Show a Snackbar message
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Book request cancelled!'),
          duration: Duration(seconds: 2),
        ),
      );

      // Refresh the list
      setState(() {
        _isProcessing = false;
      });
    } catch (error) {
      // Handle error
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Failed to cancel request'),
          duration: Duration(seconds: 2),
        ),
      );
      setState(() {
        _isProcessing = false;
      });
    }
  }

  void _showPickupDetailsModal(String docId) {
    final _phoneController = TextEditingController();
    final _placeController = TextEditingController();
    final _timeController = TextEditingController();

    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Enter Pickup Details'),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextField(
                controller: _phoneController,
                decoration: InputDecoration(labelText: 'Phone Number'),
                keyboardType: TextInputType.phone,
              ),
              TextField(
                controller: _placeController,
                decoration: InputDecoration(labelText: 'Pickup Place'),
              ),
              TextField(
                controller: _timeController,
                decoration: InputDecoration(labelText: 'Pickup Time'),
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () async {
                // Get the entered values
                String phone = _phoneController.text;
                String place = _placeController.text;
                String time = _timeController.text;

                // Update Firestore with the pickup details
                await confirmBookRequest(docId, phone, place, time);

                Navigator.of(context).pop(); // Close the modal
                Navigator.of(context).pop(); // Close the book request details dialog
              },
              child: Text('Confirm'),
            ),
            TextButton(
              onPressed: () => Navigator.of(context).pop(), // Close the modal
              child: Text('Cancel'),
            ),
          ],
        );
      },
    );
  }

  void showBookRequestDetails(Map<String, dynamic> bookRequest) async {
    // Fetch additional user details
    Map<String, dynamic> userDetails = await getUserDetails(bookRequest['userEmail']);

    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Book Request Details'),
          content: SingleChildScrollView(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text('Request Status: ${bookRequest['status']}'),
                Text('Borrow Period: ${bookRequest['borrowPeriod']} days'),
                SizedBox(height: 10),
                Text('Book Details:', style: TextStyle(fontWeight: FontWeight.bold)),
                Padding(
                  padding: const EdgeInsets.only(bottom: 8.0),
                  child: Row(
                    children: [
                      if (bookRequest['bookData']['frontImageUrl'] != null)
                        Container(
                          height: 100,
                          width: 100,
                          decoration: BoxDecoration(
                            image: DecorationImage(
                              image: NetworkImage(bookRequest['bookData']['frontImageUrl']),
                              fit: BoxFit.cover,
                            ),
                          ),
                        ),
                      SizedBox(width: 10),
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text('Title: ${bookRequest['bookData']['title']}'),
                            Text('Author: ${bookRequest['bookData']['author']}'),
                            Text('Publisher: ${bookRequest['bookData']['publisher']}'),
                            Text('Course: ${bookRequest['bookData']['course']}'),
                          ],
                        ),
                      ),
                    ],
                  ),
                ),
                SizedBox(height: 10),
                Text('Requester Details:', style: TextStyle(fontWeight: FontWeight.bold)),
                Text('Requester Email: ${bookRequest['userEmail']}'),
                Text('Requester Name: ${userDetails['name'] ?? 'N/A'}'),
                Text('Requester Address: ${userDetails['address'] ?? 'N/A'}'),
                Text('Requester Institute: ${userDetails['institute'] ?? 'N/A'}'),
                SizedBox(height: 10),
                Text('Request Date: ${bookRequest['requestDate']}'),
              ],
            ),
          ),
          actions: [
            if (bookRequest['status'] == 'requested')
              TextButton(
                onPressed: () {
                  Navigator.of(context).pop(); // Close the details dialog
                  _showPickupDetailsModal(bookRequest['docId']); // Show pickup details modal
                },
                child: Text('Confirm Request'),
              ),
            if (bookRequest['status'] == 'requested')
              TextButton(
                onPressed: () {
                  cancelBookRequest(bookRequest['docId']);
                  Navigator.of(context).pop(); // Close the details dialog
                },
                child: Text('Cancel Request'),
              ),
            TextButton(
              onPressed: () => Navigator.of(context).pop(), // Close the details dialog
              child: Text('Close'),
            ),
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Confirm Orders'),
        leading: IconButton(
          icon: Icon(Icons.arrow_back),
          onPressed: () => Navigator.of(context).pop(),
        ),
      ),
      body: Stack(
        children: [
          FutureBuilder<List<Map<String, dynamic>>>(
            future: getMyBookRequests(),
            builder: (context, snapshot) {
              if (snapshot.connectionState == ConnectionState.waiting) {
                return Center(child: CircularProgressIndicator());
              }

              if (snapshot.hasError) {
                return Center(child: Text('Failed to fetch book requests'));
              }

              List<Map<String, dynamic>> bookRequests = snapshot.data ?? [];

              if (bookRequests.isEmpty) {
                return Center(child: Text('No book requests found.'));
              }

              return ListView.builder(
                itemCount: bookRequests.length,
                itemBuilder: (context, index) {
                  var bookRequest = bookRequests[index];
                  return Card(
                    margin: EdgeInsets.all(10),
                    child: Padding(
                      padding: EdgeInsets.all(10),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            'Request #${index + 1}',
                            style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                          ),
                          SizedBox(height: 10),
                          ElevatedButton(
                            onPressed: () => showBookRequestDetails(bookRequest),
                            child: Text('Details'),
                          ),
                        ],
                      ),
                    ),
                  );
                },
              );
            },
          ),
          if (_isProcessing)
            Center(
              child: CircularProgressIndicator(),
            ),
        ],
      ),
    );
  }
}
